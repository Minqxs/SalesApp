"""
The purpose of the `cost` directive is to define a `weight` for GraphQL types,
fields, and arguments. Static analysis can use these weights when calculating
the overall cost of a query or response.
"""
directive @cost(
  """
  The `weight` argument defines what value to add to the overall cost for every
  appearance, or possible appearance, of a type, field, argument, etc.
  """
  weight: String!
) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"""
The purpose of the `@listSize` directive is to either inform the static analysis
about the size of returned lists (if that information is statically available),
or to point the analysis to where to find that information.
"""
directive @listSize(
  """
  The `assumedSize` argument can be used to statically define the maximum length of a list returned by a field.
  """
  assumedSize: Int

  """
  The `slicingArguments` argument can be used to define which of the field's
  arguments with numeric type are slicing arguments, so that their value
  determines the size of the list returned by that field. It may specify a list
  of multiple slicing arguments.
  """
  slicingArguments: [String!]

  """
  The `sizedFields` argument can be used to define that the value of the
  `assumedSize` argument or of a slicing argument does not affect the size of a
  list returned by a field itself, but that of a list returned by one of its sub-fields.
  """
  sizedFields: [String!]

  """
  The `requireOneSlicingArgument` argument can be used to inform the static
  analysis that it should expect that exactly one of the defined slicing
  arguments is present in a query. If that is not the case (i.e., if none or
  multiple slicing arguments are present), the static analysis may throw an error.
  """
  requireOneSlicingArgument: Boolean! = true
) on FIELD_DEFINITION

"""
The `@specifiedBy` directive is used within the type system definition language
to provide a URL for specifying the behavior of custom scalar definitions.
"""
directive @specifiedBy(
  """
  The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types.
  """
  url: String!
) on SCALAR

"""The `DateTime` scalar represents an ISO-8601 compliant date time type."""
scalar DateTime

"""Information about pagination in a connection."""
type PageInfo {
  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Product {
  id: String!
  description: String!
  price: Float!
  image: String
  isDeleted: Boolean!
  sales: [Sale!]!
}

"""A connection to a list of items."""
type ProductsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductsEdge!]

  """A flattened list of the nodes."""
  nodes: [Product!]

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type ProductsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Product!
}

type Query {
  products(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): ProductsConnection
  sales(
    startDate: DateTime
    endDate: DateTime
    productName: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): SalesConnection
}

type Sale {
  id: String!
  products: [Product!]!
  saleDate: DateTime!
  salePrice: Float!
  quantity: Float!
  isDeleted: Boolean!
}

"""A connection to a list of items."""
type SalesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SalesEdge!]

  """A flattened list of the nodes."""
  nodes: [Sale!]

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type SalesEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Sale!
}

